lines(density(x))
2.5^3*e^(-2.5)/3
2.5^3*exp(-2.5)/3
2.5^3*exp(-2.5)/3
2.5^3*2.8^(-2.5)/3
2.5^3*2.8^(-2.5)
2.5^3*2.8^(-2.5)/3/2
2.5^3*2.8^(-2.5*4)/3/2
(2.5*4)^3*2.8^(-2.5*4)/3/2
(2.5*4)^3*2.8^(-2.5*4)/3
10^3*exp(1)^-10
10^3*exp(1)^-10/6
10^3*exp(1)^(-10)/6
10^3*exp(1)^(-10)/3
10^3*exp(1)^(-10)/6
10^3*exp(1)^(-10)/6+10^2*exp(1)^(-10)/2+10^1*exp(1)^(-10)
n <- 10
rnorm(n)/(1:n)
cumsum(rnorm(n))/(1:n)
cumsum(rnorm(n))
1:n
cumsum(rnorm(n))
rnorm(n)
?cumsum
cumsum(1:10)
cumsum(sample(0:1, 10000, replace=TRUE))/(1:n)
means <- cumsum(sample(0:1, 10000, replace=TRUE))/(1:n)
means
hist(means)
plot(means)
plot(means)
means <- cumsum(sample(0:1, 10000, replace=TRUE))/(1:10000)
plot(means)
library(caret)
install.packages("iterators")
library(caret)
install.packages("lme4")
library(caret)
install.packages("pbkrtest")
library(caret)
install.packages("quantreg")
library(caret)
library(kernlib)
install.packages("kernlab")
library(kernlib)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
M
diag(M)
which(M>0.8,arr.ind=T)
diag(M)
diag(M) <- 0
diag(M)
M
which(M>0.8, arr.ind=T)
names(spam)
names(spam)[c(34,32)]
names(spam)[c(34)]
names(spam)[c(34,32)]
names(spam)[34]
names(spam)
names(spam)
names(spam)[34]
names(spam)[,34]
class(spam)
names(spam)[34]
names(spam)[1,]
names(spam)[34]
704/2/1
library(ISLR)
mtcars
names(mtcars)
subset(mtcars,select=c(am))
subset(mtcars,select=-c(am))
library(AppliedPredictiveModeling)
iinstall.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
ls()
diagnosis
predictors
dim(predictors)
dim(diagnosis)
dim(diagnosis)
length(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
names(training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep("^IL", names(training))
training[grep("^IL", names(training))]
tmp <- training[grep("^IL", names(training))]
tmp
M <- abs(cor(tmp))
diag(M)<-0
which(M>0.8, arr.ind=T)
M
M
which(M>0.8, arr.ind=T)
tmp <- training[grep("^IL", names(training))]
tmp
M
tmp <- training[grep("^IL", names(training))]
rownames(tmp)
colnames(tmp)
which(colnames(tmp))
colnames(tmp)
col(tmp)
which(colnams(tmp)==colnames(training))
which(colnames(tmp)==colnames(training))
colnames(tmp)
which(colnams(tmp)%in%colnames(training))
which(colnames(tmp)%in%colnames(training))
which(colnames(training)%in%colnames(tmp))
preObj <- preProcess(tmp,method=c("center","scale"))
preObj
names(training)
training$diagnosis
tmp <- training[grep("^IL|diagnosis", names(training))]
tmp
modelFit <- train(diagnosis ~ ., data=tmp, preProcessing=c("center","scale"),method="glm")
install.packages("e1071")
modelFit <- train(diagnosis ~ ., data=tmp, preProcessing=c("center","scale"),method="glm")
modelFit
?preProcess
tmp
tmp[,-1]
tmp[,-1][1:10,]
tmp[,-1][1:2,]
tmp[,-1]
preObj <- preProcess(tmp[,-1],method=c("center","scale"),thresh = 0.8)
preObj
preObj$numComp
preObj
summary(preObj)
preObj <- preProcess(tmp[,-1],thresh = 0.8)
summary(preObj)
tmp
tmp[-1,]
tmp[,-1]
preObj <- preProcess(tmp[,-1],thresh = 0.8)
preObj <- preProcess(tmp[,-1],method=c("pca"),thresh = 0.8)
summary(preObj)
preObj <- preProcess(tmp,method=c("pca"),thresh = 0.8)
preObj <- preProcess(tmp[,-1],method=c("pca"),thresh = 0.8)
preObj$numComp
summary(preObj)
preObj$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tmp <- training[grep("^IL|diagnosis", names(training))]
preObjpca <- preProcess(tmp[,-1],method=c("pca"),thresh = 0.8)
preObjpredictor <- preProcess(tmp[,-1],method=c("pca"),thresh = 0.8)
?train
model1 <- train(diagnosis~., data=tmp, preObjpca, method="glm")
model1 <- train(diagnosis~., data=tmp, preProcess("pca"), method="glm")
preProc1 <- preProcess(tmp[,-1],method="pca", thresh = 0.8)
preProc2 <- preProcess(tmp[,-1], thresh = 0.8)
?preProcess
trainPC1 <- predict(preProc1, tmp[,-1])
trainPC2 <- predict(preProc2, tmp[,-1])
modelFit1 <- train(tmp$diagnosis ~. method="glm", data=trainPC1)
modelFit1 <- train(tmp$diagnosis ~., method="glm", data=trainPC1)
modelFit2 <- train(tmp$diagnosis ~., method="glm", data=trainPC2)
modelFit1
test <- testing[grep("^IL|diagnosis", names(testing))]
testPC1 <- predict(preProc1, test[,-1])
confusionMatrix((test$diagnosis, predict(modelFit1,testPC1)))
confusionMatrix(test$diagnosis, predict(modelFit1,testPC1))
confusionMatrix(test$diagnosis, predict(modelFit2,testPC2))
testPC2 <- predict(preProc2, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2,testPC2))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer+1))
hist(log10(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess()
preProc <- preProcess(training, thresh = 0.9)
preProc <- preProcess(tmp[,-1], thresh = 0.9)
train <- training[grep("^IL|diagnosis", names(training))]
preProc <- preProcess(train[,-1], thresh = 0.9)
preProc$numComp
preProc <- preProcess(train[,-1], thresh = 0.9)
preProc <- preProcess(train[,-1], thresh = 0.9, method="pca")
preProc$numComp
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
plot(log10(training$Superplasticizer),training$Superplasticizer)
plot(training$Superplasticizer, log10(training$Superplasticizer))
hist(log10(training$Superplasticizer))
plot(training$Superplasticizer, log10(training$Superplasticizer))
training$Superplasticizer==0
!training$Superplasticizer==0
sum(!training$Superplasticizer==0)
sum(training$Superplasticizer==0)
table(training$Superplasticizer==0)
log10(training$Superplasticizer)
runif(0,1)
runif(0:1)
runif(1:100)
runif(1:100)
runif(1:100)<0.6
sum(runif(1:100)<0.6)
runif(1:100)
runif(1:1000)
sum(runif(1:1000)<0.6)
library(datasets)
data("ChickWeight")
library(reshape2)
ChickWeight
ChickWeight[1:10,]
wideCW <- dcast(ChickWeight, Diet+Chick ~ Time, value.var="weight")
wideCW
airquality
melt(airquality)
aql <- melt(airquality)
aql
airquality
aql
aql[1:10]
aql[1:10,]
aql[1:100,]
aql[1:200,]
aql[1:300,]
aql[1:400,]
aql[1:500,]
aql[1:600,]
aql[1:700,]
aql <- melt(airquality, id.vars = c("month", "day"))
aql
aql <- melt(airquality, id.vars = c("month", "day"))
airquality
names(airquality)
aql <- melt(airquality, id.vars = c("Month", "Day"))
aql
wideCW
ChickWeight
ChickWeight[1:10,]
?dcast
wideCW
wideCW <- dcast(ChickWeight, Diet+Chick ~ Time)
wideCW
wideCW <- dcast(ChickWeight, Diet+Chick ~ Time, value.var="weight")
wideCW
names(wideCW)
names(wideCW)[-(1:2)]
ChickWeight[1:10,]
ChickWeight[ChickWeight$Chick==1&ChickWeight$Diet==1]
ChickWeight[ChickWeight$Chick==1&ChickWeight$Diet==1,]
wideCW
1     1 42 51 59 64  76  93 106 125 149 171 199 205
ChickWeight[ChickWeight$Chick==1&ChickWeight$Diet==1,]
wideCW
library(dplyr)
wideCW <- mutate(wideCW, gain=21-0)
wideCW
names(wideCW)[-c(1:2)] <- paste("time",names(wideCW)[-c(1:2)], sep="")
wideCW
names(wideCW)[-c(1:2)] <- paste("time",names(wideCW)[-c(1:2)], sep="")
wideCW
wideCW <- dcast(ChickWeight, Diet+Chick ~ Time, value.var="weight")
names(wideCW)[-c(1:2)] <- paste("time",names(wideCW)[-c(1:2)], sep="")
wideCW
wideCW <- mutate(wideCW, gain=time21-time0)
wideCW
plot(gain)
plot(gain,col=diet)
with(wideCW, plot($gain,col=diet))
with(wideCW, plot(gain,col=diet))
with(wideCW, plot(gain~,col=diet))
with(wideCW, plot(gain,col=diet))
with(wideCW, plot(gain, main="Test"))
with(wideCW, plot(gain, main="Test",col=diet))
with(wideCW, plot(gain, main="Test",col=Diet))
with(wideCW, qplot(gain, main="Test",col=Diet))
with(wideCW, plot(gain, main="Test",col=Diet))
ggplot(wideCW, aes(y=gain, colour=Diet, group=Diet)) + geom_line() + geom_point() + labs(x="Year",y="Total Emissions (Tons)")
g = ggplot(wideCW, aes(y=gain, colour=Diet, group=Diet)) + geom_line() + geom_point() + labs(x="Year",y="Total Emissions (Tons)")
print (g)
g = ggplot(wideCW, aes(x=names(wideCW)[-(1:2)], y=gain, colour=Diet, group=Diet)) + geom_line() + geom_point() + labs(x="Year",y="Total Emissions (Tons)")
print (g)
g = ggplot(wideCW, aes(x=seq_along(gain), y=gain, colour=Diet, group=Diet)) + geom_line() + geom_point() + labs(x="Year",y="Total Emissions (Tons)")
print (g)
print (g)
qt(0.025,15)
qt(0.025,15)
?t.test()
data(mtcars)
mtcars
t.test(mtcars$mpg)
qt(0.975)
qt(0.975,8)
1./qt(0.975,8)
qt(0.975,8)
qt(0.975,8,lower.tail = T)
qt(0.975,8,lower.tail = F)
qt(0.975,8)
qt(0.975,8)*1/sqrt(9)
qt(0.975,8)*1/sqrt(9)
t.test(mtcars$mpg)
t.test(mtcars$mpg)$conf.int
mtcars
?dcast
dcast(mtcars, mpg~cylinder)
dcast(mtcars, mpg~cyl)
dcast(mtcars, cyl~mpg)
dcast(mtcars, cyl~mpg, value.var="mpg")
dcast(mtcars, cyl~mpg, value.var="value")
dcast(mtcars, cyl~mpg)
mtcars
dcast(mtcars, cyl~variable)
dcast(mtcars, cyl~variable)
carMelt <- melt(mtcars, id=c("cyl"), measure.vars=c("mpg"))
carMelt
cylData <- dcast(carMelt, cyl~variable)
cylData <- dcast(carMelt, cyl~variable, mean)
cylData
cylData <- dcast(carMelt, cyl~variable, length)
cylData
cylData
cylData <- dcast(carMelt, cyl~variable)
cylData
carMelt
mtcars
mtcars$cyl==4
mtcars[mtcars$cyl==4,]
mtcars[mtcars$cyl==4,]$mpg
t.test(mtcars[mtcars$cyl==4,]$mpg, mtcars[mtcars$cyl==6,]$mpg)
t.test(mtcars[mtcars$cyl==4,]$mpg, mtcars[mtcars$cyl==6,]$mpg, var.equal = TRUE)
mtcars[mtcars$cyl==4]
mtcars[mtcars$cyl==4,]
mtcars$mpg[mtcars$cyl==4]
mtcars$mpg
mtcars$mpg[mtcars$cyl==4]
(1.8^2/9+1.5^2/9)
sqrt(1.8^2/9+1.5^2/9)
(1.8^2+1.5^2)/2
(1.8^2+1.5^2)/2
?dcast
cylData <- dcast(carMelt, cyl~variable, mean+length)
cylData <- dcast(carMelt, cyl~variable, mean)
cylData
qt(0.975,8)
qt(0.975,8)*c(-1,1)
qt(0.975,8)*c(-1,1)*30 + 1100
qt(0.975,8)/3/2
6/qt(0.975,8)
(0.6+0.68)*0.5
sqrt((0.6+0.68)*0.5)
sqrt((0.6+0.68)*0.5)*sqrt(1/5)
-2+sqrt((0.6+0.68)*0.5)*sqrt(1/5)*c(qt(0.975,9))
-2-sqrt((0.6+0.68)*0.5)*sqrt(1/5)*c(qt(0.975,9))
sqrt((0.6^2/10+0.68^2/10))*c(qt(0.975,9))
sqrt((0.6^2/10+0.68^2/10))*c(qt(0.975,9))*c(-1,1)
-2+sqrt((0.6^2/10+0.68^2/10))*c(qt(0.975,9))*c(-1,1)
-2+sqrt((0.6^2/10+0.68^2/10))*c(qt(0.975,18))*c(-1,1)
-2+sqrt((0.6+0.68)*0.5)/sqrt(1/5)*c(qt(0.975,18))*c(-1,1)
-2+sqrt((0.6+0.68)*0.5)/sqrt(1/5)*c(qt(0.975,18))*c(-1,1)
qt(0.975,18)
(0.6*9+0.68*9)/18
sqrt(0.64)
-2 * c(-1,1)*qt(0.975,18) * 0.8
-2 + c(-1,1)*qt(0.975,18) * 0.8
-2 + c(-1,1)*qt(0.975,18) * 0.8*sqrt(1/10+1/10)
2 + c(-1,1)*qt(0.975,200)*sqrt((0.5^2*99+2.0^2*99)/198)*sqrt(1/50)
-4 + c(-1,1)*qt(0.95,7)*sqrt((1.8^2*8+1.5^2*8)/16)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,8)*sqrt((1.8^2*8+1.5^2*8)/16)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,8)*sqrt((1.8^2*8+1.5^2*8)/16)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,8)*sqrt(2.75)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,9)*sqrt(2.75)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,8)*sqrt(2.75)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,17)*sqrt(2.75)*sqrt(2/9)
-4 + c(-1,1)*qt(0.95,16)*sqrt(2.75)*sqrt(2/9)
-2 + c(-1,1)*qt(0.975,18) * 0.8*sqrt(1/10+1/10)
-2 + c(-1,1)*qt(0.975,18) * 0.8*sqrt(1/10+1/10)
1100 + c(-1,1) * qt(0.975,8) * 30 /sqrt(9)
quit()
setwd("~/repo/git/data_science/")
setwd("Statistical_Inference/")
ls
ls()
dir()
rm(ls())
rm(ls)
rm(ls())
rm (a)
rm (b)
rm (d)
rm (e)
rm (f)
rm (fmat)
rm (mat)
ls()
rm (mat1)
rm (mymat)
rm (pop)
rm (ls())
rm(pop_failurs)
rm(list=ls())
dir()
?matrix
rexp(40,0.2)
?rexp
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
rexp(40,0.2)
matrix(rexp(40, lambda),4)
matrix(rexp(40, 0.2),4)
matrix(rexp(40,0.2),1)
a<-matrix(rexp(40,0.2),1)
dim(a)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
apply(m, 1, mean)
m
?hist
?line
?abline
plot(rnorm(100),type="l",col=2)
> lines(rnorm(100),col=3)
plot(rnorm(100),type="l",col=2)
lines(rnorm(100),col=3)
plot(rnorm(100),type="l",col=2)
lines(1,col=3)
plot(rnorm(100),type="l",col=2)
lines(2,col=3)
plot(rnorm(100),type="l",col=2)
?dnorm
x
?diff
diff(1:10, 2)
1:10
diff(1:10, 2,2)
diff(1:10, 2, 2)
diff(1:10, 2, 2)
?mids
??mids
?mean
?variance
hist(runif(1000))
